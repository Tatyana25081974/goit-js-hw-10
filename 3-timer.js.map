{"version":3,"file":"3-timer.js","sources":["../src/js/3-timer.js"],"sourcesContent":["//Імпортуємо бібліотеки Flatpickr та iziToast,Разом із бібліотеками ми імпортуємо їхні стилі (CSS).\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n//Оголошуємо об'єкт timer, який відповідає за логіку таймера\nconst timer = {\n  deadline: null,//дата, до якої буде виконуватися зворотний відлік.Зберігає кінцеву дату\n  intervalId: null,//ідентифікатор таймера для зупинки через clearInterval\n  elements: {//об'єкт, що зберігає посилання на елементи в DOM, які відображають дні, години, хвилини й секунди.\n    days: document.querySelector('[data-days]'),//Зберігає посилання на HTML-елементи таймера:days: елемент для відображення кількості днів (data-days).\n    hours: document.querySelector('[data-hours]'),//hours: елемент для відображення годин (data-hours)\n    minutes: document.querySelector('[data-minutes]'),//minutes: елемент для відображення хвилин (data-minutes).\n    seconds: document.querySelector('[data-seconds]'),//seconds: елемент для відображення секунд (data-seconds)\n  },\n//Перевіряємо, чи є встановлена дата в deadline. Якщо ні – функція припиняється.\n  start() {\n    if (!this.deadline) return;//// Якщо немає кінцевої дати, нічого не робимо\n    if (this.isPaused) {\n      // Якщо таймер був на паузі (this.isPaused === true), розраховуємо нову кінцеву дату.\n      this.deadline = new Date(Date.now() + this.remainingTime);//this.remainingTime зберігає кількість мілісекунд, що залишились до кінця. Date.now() — це поточний час у мілісекундах. Date.now() + this.remainingTime розраховує нову кінцеву дату, враховуючи час паузи.\n      //Що робить setInterval:Запускає функцію, яка виконується кожну секунду.Вираховує, скільки часу залишилося\n      this.isPaused = false;\n    }\n//Розраховується різниця між обраною датою (this.deadline) і поточним часом (Date.now()).\n    this.intervalId = setInterval (() => { // Запускаємо таймер, який працює кожну секунду. Обчислює, скільки часу залишилось.Оновлює HTML.\n\n      const diff = this.deadline - Date.now();// Кінцева дата - поточна дата\n\n      if (diff <= 0) { //Перевіряється, чи різниця між кінцевою датою таймера (this.deadline) та поточним часом (Date.now()) дорівнює нулю або стала від'ємною.\n        this.stop();// Викликається метод stop(), який:Зупиняє таймер, очищуючи інтервал через clearInterval.Таймер більше не оновлює інтерфейс.\n       this.updateUI({ days: 0, hours: 0, minutes: 0, seconds: 0 });//Інтерфейс оновлюється, встановлюючи всі значення таймера (дні, години, хвилини, секунди) у 0.\n        iziToast.success({//Використовується бібліотека iziToast для відображення спливаючого повідомлення (toast) про успішне завершення таймера.\n          title: \"Success\",\n          message: \"Countdown completed!\",\n          position: \"topRight\",\n        });\n        document.getElementById(\"alarm-sound\").play(); // Відтворює звуковий сигнал завершення.\n        return;//Завершує виконання поточної функції.Це запобігає виконанню коду, який йде після цієї умови, адже таймер уже завершився\n      }\n       this.remainingTime = diff; // Оновлюємо час, що залишився\n      const timeComponents = this.getTimeComponents(diff);//Викликається метод getTimeComponents(diff), щоб перетворити різницю між кінцевою датою таймера (this.deadline) і поточним часом (Date.now()) на окремі компоненти часу: дні, години, хвилини, секунди.\n      this.updateUI(timeComponents);//Викликається метод updateUI(timeComponents), щоб оновити значення на екрані.\n    }, 1000);\n  },\n//метод зупиняє таймер\n  stop() {\n    clearInterval(this.intervalId);//Зупиняє виконання функції, яка працює через setInterval.Видаляє інтервал, встановлений методом setInterval. Це припиняє оновлення інтерфейсу.\n    this.intervalId = null;//Скидає значення intervalId, щоб вказати, що таймер більше не працює.Змінна intervalId встановлюється у null, щоб показати, що таймер більше не працює\n  },\n\n  setDeadline(selectedDate) {\n    this.deadline = selectedDate;//метод встановлює кінцеву дату таймера (this.deadline) на передану дату (selectedDate), обрану через Flatpickr.\n  },\n\n  getTimeComponents(diff) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(diff / day);// Кількість днів.Округлює значення вниз до цілого числа\n    const hours = Math.floor((diff % day) / hour);// Залишкові години. Допомагає обчислити залишковий час для менших одиниць.\n    const minutes = Math.floor(((diff % day) % hour) / minute);// Залишкові хвилини\n    const seconds = Math.floor((((diff % day) % hour) % minute) / second);// Залишкові секунди\n\n    return { days, hours, minutes, seconds };//Метод повертає об'єкт: { days, hours, minutes, seconds }.\n\n\n  },\n// Форматування чисел із провідними нулями\n  pad(value) {\n    return String(value).padStart(2, \"0\");//Ця функція додає провідні нулі до значення, якщо його довжина менша за 2 символи\n  },\n\n  updateUI({ days, hours, minutes, seconds }) {\n    this.elements.days.textContent = this.pad(days);// this.elements.days.textContent: оновлює текстовий вміст елемента data-days.Оновлює дні.Додає нулі до чисел\n    this.elements.hours.textContent = this.pad(hours);// Оновлює години\n    this.elements.minutes.textContent = this.pad(minutes);// Оновлює хвилини\n    this.elements.seconds.textContent = this.pad(seconds);// Оновлює секунди\n  },\n};\n\n// Інтеграція Flatpickr.Використовується бібліотека Flatpickr для вибору дати й часу:\nflatpickr(\"#datetime-picker\", {\n  enableTime: true,//Дозволяє вибирати час\n  time_24hr: true,//Встановлює 24-годинний формат\n  defaultDate: new Date(),//Встановлює поточну дату за замовчуванням\n  minuteIncrement: 1,//Дозволяє змінювати хвилини з кроком 1.\n  onClose(selectedDates) {//Викликається, коли користувач закриває календар.Спрацьовує, коли користувач обирає дату.\n    const selectedDate = selectedDates[0];\n    const startButton = document.querySelector('button[data-start]');\n\n    if (selectedDate <= new Date()) {//Якщо вибрана дата менша або дорівнює поточній, показується помилка через iziToast\n      iziToast.error({ // Показує помилку\n        title: \"Error\",\n        message: \"Please choose a date in the future\",\n        position: \"topRight\",\n      });\n      startButton.disabled = true;// Заблокувати кнопку\n    } else {//Інакше встановлюється кінцева дата через timer.setDeadline().\n      timer.setDeadline(selectedDate);\n      startButton.disabled = false;// Активувати кнопку\n    }\n  },\n});\n// Функція для відображення часу завершення\nfunction displayEndTime(deadline) {\n  const endTimeElement = document.getElementById(\"end-time\");\n  const endTime = new Date(deadline);\n\n  const hours = String(endTime.getHours()).padStart(2, \"0\");\n  const minutes = String(endTime.getMinutes()).padStart(2, \"0\");\n  const seconds = String(endTime.getSeconds()).padStart(2, \"0\");\n\n  endTimeElement.textContent = `Timer ends at: ${hours}:${minutes}:${seconds}`;\n}\n// Подія для кнопки старту\ndocument.querySelector('button[data-start]').addEventListener(\"click\", () => {\n  timer.start();//Коли користувач натискає \"Start\".Запускається timer.start().Поле вибору дати та кнопка \"Start\" блокуються, щоб уникнути повторного запуску.\n  document.getElementById(\"datetime-picker\").disabled = true;//Поле вибору дати (#datetime-picker) блокується (disabled = true).\n  document.querySelector('button[data-start]').disabled = true;//Кнопка \"Start\" також блокується (disabled = true), щоб уникнути повторного запуску\n  document.querySelector(\"button[data-pause]\").disabled = false; // Активуємо кнопку паузи\n});\n// Обробник кнопки паузи/продовження\ndocument.querySelector(\"button[data-pause]\").addEventListener(\"click\", () => {//Шукає HTML-елемент із атрибутом data-pause. Це кнопка для зупинки/продовження таймера.Коли користувач натискає кнопку, виконується функція.\n  if (timer.isPaused) {\n    timer.start(); // Продовжуємо таймер\n    document.querySelector(\"button[data-pause]\").textContent = \"Pause\";\n  } else {\n    clearInterval(timer.intervalId); // Ставимо на паузу\n    timer.isPaused = true;\n    document.querySelector(\"button[data-pause]\").textContent = \"Resume\";\n  }\n});\n"],"names":["timer","diff","iziToast","timeComponents","selectedDate","days","hours","minutes","seconds","value","flatpickr","selectedDates","startButton"],"mappings":"2GAMA,MAAMA,EAAQ,CACZ,SAAU,KACV,WAAY,KACZ,SAAU,CACR,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CACjD,EAED,OAAQ,CACD,KAAK,WACN,KAAK,WAEP,KAAK,SAAW,IAAI,KAAK,KAAK,MAAQ,KAAK,aAAa,EAExD,KAAK,SAAW,IAGlB,KAAK,WAAa,YAAa,IAAM,CAEnC,MAAMC,EAAO,KAAK,SAAW,KAAK,IAAG,EAErC,GAAIA,GAAQ,EAAG,CACb,KAAK,KAAI,EACV,KAAK,SAAS,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAG,CAAA,EAC1DC,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,uBACT,SAAU,UACpB,CAAS,EACD,SAAS,eAAe,aAAa,EAAE,KAAI,EAC3C,MACD,CACA,KAAK,cAAgBD,EACtB,MAAME,EAAiB,KAAK,kBAAkBF,CAAI,EAClD,KAAK,SAASE,CAAc,CAC7B,EAAE,GAAI,EACR,EAED,MAAO,CACL,cAAc,KAAK,UAAU,EAC7B,KAAK,WAAa,IACnB,EAED,YAAYC,EAAc,CACxB,KAAK,SAAWA,CACjB,EAED,kBAAkBH,EAAM,CAMtB,MAAMI,EAAO,KAAK,MAAMJ,EAAO,KAAG,EAC5BK,EAAQ,KAAK,MAAOL,EAAO,MAAO,IAAI,EACtCM,EAAU,KAAK,MAAQN,EAAO,MAAO,KAAQ,GAAM,EACnDO,EAAU,KAAK,MAASP,EAAO,MAAO,KAAQ,IAAU,GAAM,EAEpE,MAAO,CAAE,KAAAI,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAGvC,EAED,IAAIC,EAAO,CACT,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACrC,EAED,SAAS,CAAE,KAAAJ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC1C,KAAK,SAAS,KAAK,YAAc,KAAK,IAAIH,CAAI,EAC9C,KAAK,SAAS,MAAM,YAAc,KAAK,IAAIC,CAAK,EAChD,KAAK,SAAS,QAAQ,YAAc,KAAK,IAAIC,CAAO,EACpD,KAAK,SAAS,QAAQ,YAAc,KAAK,IAAIC,CAAO,CACrD,CACH,EAGAE,EAAU,mBAAoB,CAC5B,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMP,EAAeO,EAAc,CAAC,EAC9BC,EAAc,SAAS,cAAc,oBAAoB,EAE3DR,GAAgB,IAAI,MACtBF,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,UAClB,CAAO,EACDU,EAAY,SAAW,KAEvBZ,EAAM,YAAYI,CAAY,EAC9BQ,EAAY,SAAW,GAE1B,CACH,CAAC,EAaD,SAAS,cAAc,oBAAoB,EAAE,iBAAiB,QAAS,IAAM,CAC3EZ,EAAM,MAAK,EACX,SAAS,eAAe,iBAAiB,EAAE,SAAW,GACtD,SAAS,cAAc,oBAAoB,EAAE,SAAW,GACxD,SAAS,cAAc,oBAAoB,EAAE,SAAW,EAC1D,CAAC,EAED,SAAS,cAAc,oBAAoB,EAAE,iBAAiB,QAAS,IAAM,CACvEA,EAAM,UACRA,EAAM,MAAK,EACX,SAAS,cAAc,oBAAoB,EAAE,YAAc,UAE3D,cAAcA,EAAM,UAAU,EAC9BA,EAAM,SAAW,GACjB,SAAS,cAAc,oBAAoB,EAAE,YAAc,SAE/D,CAAC"}